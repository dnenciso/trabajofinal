{"version":3,"sources":["components/Tabla_datos.jsx","components/Formulario_usuario.jsx","components/Editar_tabla.jsx","App.js","index.js"],"names":["Tabla_datos","props","users","length","map","user","key","id","name","profesion","className","onClick","editRow","deleteUser","colSpan","Form_usuario","useForm","register","errors","handleSubmit","onSubmit","data","e","addUser","target","reset","placeholder","type","ref","required","value","message","Editar_tabla","defaultValues","currentUser","setValue","console","log","updateUser","username","setEditing","App","usersData","uuidv4","useState","setUsers","editing","setCurrentUser","updatedUser","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.136c0232.chunk.js","sourcesContent":["import React from 'react'\n\n\n// creo  la funcion flecha llamada tabla_datos \nconst Tabla_datos = (props) => (\n  <table>\n    <thead>\n      <tr>\n        <th>NOMBRE</th>\n        <th>PROFESION</th>\n        <th>FUNCION</th>\n      </tr>\n    </thead>\n    <tbody>\n        {\n            // llamamos el props users para traer los datos de usuarios \n            props.users.length > 0 ? (\n                props.users.map(user => (\n                    <tr key={user.id}>\n                        <td>{user.name}</td>\n                        <td>{user.profesion}</td>\n                        <td>\n                        <button \n                            className=\"button muted-button\"\n                            /* creamos la funcion fecha mediante el evento onclick \n                            para editar informacion del usuario con el props editrow  mediante el formulario editar usuario */\n                            onClick={() => {\n                                props.editRow(user)\n                            }}\n                            >\n                            Editar\n                        </button>\n                        <button \n                            className=\"button muted-button\"\n                            // creamos la funcion fecha  mediante el evento onclick para la eliminacion del usuario,\n                            // lo que hacemos es llamar el props delete user \n                            onClick={() => props.deleteUser(user.id)}\n                            >\n                            Eliminar\n                        </button>\n                        </td>\n                    </tr>\n                ))\n\n                // si no hay usuarios creamos la respuesta\n            ) : (\n                <tr>\n                    <td colSpan={3}>No hay usuarios creados</td>\n                </tr>\n            )\n        }\n\n      \n    </tbody>\n  </table>\n)\n\nexport default Tabla_datos;","import React from 'react';\r\nimport { useForm } from 'react-hook-form'  // llamamos el componente para el formulario \r\n\r\n\r\n// creamos la funcion  form_usuario\r\nconst Form_usuario = (props) => {\r\n    \r\n\r\n    /* creamos este objeto */\r\n    const {register, errors, handleSubmit} = useForm();\r\n    \r\n\r\n    // creamos la funcion onsubmit para enviar la informacion a nuestro objeto\r\n    const onSubmit = (data, e) => {\r\n        data.id = null\r\n        // recibimos el props addUser creado en app.js y le entregamos la informacion que ya tenemos en el data\r\n        props.addUser(data)\r\n        e.target.reset();\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <label>Name</label>\r\n            <input placeholder = \"INGRESA NOMBRE\"\r\n                type=\"text\" \r\n                name=\"name\"\r\n                // creamos el objeto para validar si el campo tiene datos y si no tiene datos entregar el mensaje de Valor requerido\r\n                ref={register({required: {value: true, message: 'Valor requerido'}})}\r\n                />\r\n            <div className=\"event\" >\r\n                {errors?.name?.message}\r\n            </div>\r\n            <label>Profesion</label>\r\n            <input placeholder = \"INGRESA TU PROFESION\"\r\n                type=\"text\" \r\n                name=\"profesion\" \r\n                // creamos el objeto para validar si el campo tiene datos y si no tiene datos entregar el mensaje de Valor requerido\r\n                ref={register({required: {value: true, message: 'Valor requerido'}})}\r\n                />\r\n            \r\n            <div className=\"event\" >\r\n                {errors?.profesion?.message}\r\n            </div>\r\n            <button type=\"submit\">Nuevo Usuario</button>\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default Form_usuario;","import React from 'react'\nimport { useForm } from 'react-hook-form'\n\n// creamos la funcion flecha editar_tabla \nconst Editar_tabla = (props) => {\n       // creamos este objeto objeto \n    const {register, errors, handleSubmit, setValue} = useForm({\n        /* seleccionamos la propiedad defaulValues para recibir los valores por defecto \n        que va a tener nuestro formulario de editar*/\n        defaultValues: props.currentUser\n    });\n     \n    /* creamos estos setvalue para que se identifique que cambia\n     el campo y con el props coloquemos la informacion*/\n    setValue('name', props.currentUser.name)\n    setValue('profesion', props.currentUser.profesion)\n      \n    // funcion flecha para enviar la informacion a la tabla\n    const onSubmit = (data, e) => {\n        // creamos data.id para asignarle el props currentuser id\n        data.id = props.currentUser.id\n        console.log(data)\n        /* utilizamos nuestro props updateuser para recibir el current user id \n         mas el parametro data */\n        props.updateUser(props.currentUser.id, data)\n        e.target.reset()\n    }\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <label>Name</label>\n            <input \n                type=\"text\" \n                name=\"name\"\n                ref={register({required: {value: true, message: 'Valor requerido'}})}\n                />\n            <div className=\"event\" >\n                {errors?.name?.message}\n            </div>\n            <label>Profesion</label>\n            <input \n                type=\"text\" \n                name=\"profesion\" \n                ref={register({required: {value: true, message: 'Valor requerido'}})}\n                />\n            <div className=\"event\" >\n                {errors?.username?.message}\n            </div>\n            <button type=\"submit\">Actualizar Datos</button>\n            <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n                Cancel\n            </button>\n        </form>\n    );\n}\n \nexport default Editar_tabla;","import React, {useState} from 'react';\nimport Tabla_datos from './components/Tabla_datos';\nimport Form_usuario from './components/Formulario_usuario';\nimport Editar_tabla from './components/Editar_tabla';\nimport { v4 as uuidv4 } from 'uuid';\n\n  // creo la funcion app\n\nfunction App() {\n\n  // aqui creo un array de objeto \n  // usamos la libreria uuid para la creacion de id automatico para el objeto id\n  const usersData = [\n   { id: uuidv4(), name: 'Jonathan Alonso', profesion: 'Ing Sistemas' },\n   { id: uuidv4(), name: 'Cristian Diaz', profesion: 'Tec Sistemas' },\n   { id: uuidv4(), name: 'Daniel Enciso Orjuela', profesion: 'Ing Sistemas' },\n  ]\n   \n  // paso la informacion mediante el estado UseState\n  const [users, setUsers] = useState(usersData)\n\n  // agregamos la funcion de flecha llamada addUser la cual le asignamos como parametro un usuario para agregar el id automatico de la libreria \n  const addUser = (user) => {\n    user.id = uuidv4()\n    console.log(user)\n    setUsers([\n      ...users,\n      user\n    ])\n  }\n\n  // creamos la funcion fecha deleteUser \n  \n  const deleteUser = (id) => {\n    // nuevamente utilizamos el state para realizar el filtrado del id que traemos \n    // como parametro para la eliminacion del usuario\n    setUsers(users.filter(user => user.id !== id))\n    console.log(id)\n  }\n\n  /* creamos un state llamado editing que estara estabecido en falso \n  para poder pintar el formulario de edicion */\n  const [editing, setEditing] = useState(false)\n\n  /* creamos un state llamado currenuser para traer la informacion que\n   ya esta en la tabla de datos del usuario */\n  // para poderla pintar en el formulario de editar_tabla\n  // con los datos del usuario id, name y profesion\n    const [currentUser, setCurrentUser] = useState({\n    id: null, name: '', profesion: '' \n  });\n\n  // creamos una funcion editRow para resivir el usuario que vamos a modificar \n  const editRow = user => {\n    setEditing(true) \n    /* nuevamente llamamos nuestro setEditing para llamar nuestro array user\n    para poder validar si el id conincide con el id \n    o pintamos nuestro usuario actualizado*/\n    setCurrentUser({ id: user.id, name: user.name, profesion: user.profesion })\n  }\n  /* creamos una funcion llamada updateuser para la actualiacion de la tabla_datos\n  mediante un id y unos datos de usuario nuevo */\n  const updateUser = (id, updatedUser) => {\n    setEditing(false)\n    setUsers(users.map(user => (user.id === id ? updatedUser : user)))\n  }\n  \n\n  // pasamos la informacion mediante los props \n  // mostramos la informacion de los stade \n  // mediante los component de editar_tabla, tabla_datos y formulario_usuario\n  return (\n    <div className=\"container\">\n      <h1>CRUD React Daniel Enciso</h1>\n      <div className=\"flex-row\">\n        <div className=\"flex-large\">\n          \n        {editing ? (\n          <div>\n            <h2>Editar usuario</h2>\n            <Editar_tabla \n              setEditing={setEditing}\n              currentUser={currentUser}\n              updateUser={updateUser}\n            />\n          </div>\n        ) : (\n          <div>\n            <h2>Ingresar Nuevo Usuario</h2>\n            <Form_usuario \n            addUser={addUser} />\n          </div>\n        )}\n      </div>\n        <div className=\"flex-large\">\n          <h2>Datos Usuarios</h2>\n          <Tabla_datos\n               users={users} \n               deleteUser={deleteUser}\n               editRow={editRow} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}